From 88d281e968026fd817c3bf65bbe0d3321cdbdff6 Mon Sep 17 00:00:00 2001
From: Benjamin Zaitlen <quasiben@gmail.com>
Date: Mon, 20 Mar 2023 08:36:54 +0100
Subject: [PATCH 1/3] drop pyarrow versions, build with proper ABI settings,
 and handle alternate location for libarrow_python

---
 setup.py | 55 ++++++++++++++++++++++++++++++++++---------------------
 1 file changed, 34 insertions(+), 21 deletions(-)

diff --git a/setup.py b/setup.py
index 6ec7a70..8c7debf 100644
--- a/setup.py
+++ b/setup.py
@@ -87,16 +87,16 @@ if _ABLE_TO_COMPILE_EXTENSIONS and not SNOWFLAKE_DISABLE_COMPILE_ARROW_EXTENSION
         # upgraded
         arrow_libs_to_copy = {
             "linux": [
-                "libarrow.so.1000",
-                "libarrow_dataset.so.1000",
-                "libarrow_python.so.1000",
-                "libparquet.so.1000",
+                "libarrow.so",
+                "libarrow_dataset.so",
+                "libarrow_python.so",
+                "libparquet.so",
             ],
             "darwin": [
-                "libarrow.1000.dylib",
-                "libarrow_dataset.1000.dylib",
-                "libarrow_python.1000.dylib",
-                "libparquet.1000.dylib",
+                "libarrow.dylib",
+                "libarrow_dataset.dylib",
+                "libarrow_python.dylib",
+                "libparquet.dylib",
             ],
             "win32": [
                 "arrow.dll",
@@ -108,16 +108,16 @@ if _ABLE_TO_COMPILE_EXTENSIONS and not SNOWFLAKE_DISABLE_COMPILE_ARROW_EXTENSION
 
         arrow_libs_to_link = {
             "linux": [
-                "libarrow.so.1000",
-                "libarrow_dataset.so.1000",
-                "libarrow_python.so.1000",
-                "libparquet.so.1000",
+                "libarrow.so",
+                "libarrow_dataset.so",
+                "libarrow_python.so",
+                "libparquet.so",
             ],
             "darwin": [
-                "libarrow.1000.dylib",
-                "libarrow_dataset.1000.dylib",
-                "libarrow_python.1000.dylib",
-                "libparquet.1000.dylib",
+                "libarrow.dylib",
+                "libarrow_dataset.dylib",
+                "libarrow_python.dylib",
+                "libparquet.dylib",
             ],
             "win32": [
                 "arrow.lib",
@@ -173,7 +173,7 @@ if _ABLE_TO_COMPILE_EXTENSIONS and not SNOWFLAKE_DISABLE_COMPILE_ARROW_EXTENSION
                     ext.extra_compile_args.append("-isystem" + numpy.get_include())
                     if "std=" not in os.environ.get("CXXFLAGS", ""):
                         ext.extra_compile_args.append("-std=c++17")
-                        ext.extra_compile_args.append("-D_GLIBCXX_USE_CXX11_ABI=0")
+                        ext.extra_compile_args.append("-D_GLIBCXX_USE_CXX11_ABI=1")
                     if (
                         sys.platform == "darwin"
                         and "macosx-version-min" not in os.environ.get("CXXFLAGS", "")
@@ -258,7 +258,7 @@ if _ABLE_TO_COMPILE_EXTENSIONS and not SNOWFLAKE_DISABLE_COMPILE_ARROW_EXTENSION
                 elif sys.platform == "linux" or sys.platform == "darwin":
                     if "std=" not in os.environ.get("CXXFLAGS", ""):
                         ext.extra_compile_args.append("-std=c++17")
-                        ext.extra_compile_args.append("-D_GLIBCXX_USE_CXX11_ABI=0")
+                        ext.extra_compile_args.append("-D_GLIBCXX_USE_CXX11_ABI=1")
                     if (
                         sys.platform == "darwin"
                         and "macosx-version-min" not in os.environ.get("CXXFLAGS", "")
@@ -320,8 +320,18 @@ if _ABLE_TO_COMPILE_EXTENSIONS and not SNOWFLAKE_DISABLE_COMPILE_ARROW_EXTENSION
             ret = []
 
             for lib in link_lib:
-                source = f"{self._get_arrow_lib_dir()}/{lib}"
-                assert os.path.exists(source)
+                # conda-forge specific fix for arrow 10+
+                # see: https://github.com/conda-forge/arrow-cpp-feedstock/blob/main/recipe/meta.yaml#L279
+                if pyarrow_version[0] >= 10 and "arrow_python" in lib:
+                    try:
+                        source = os.path.join(os.environ['SP_DIR'], 'pyarrow', lib)
+                        assert os.path.exists(source)
+                    except AssertionError:
+                        # os.environ['BUILD_PREFIX'] lib/python3.8/site-packages
+                        source = os.path.join(os.environ['PYTHONPATH'], 'pyarrow', lib)
+                else:
+                    source = os.path.join(self._get_arrow_lib_dir(), lib)
+                assert os.path.exists(source), f"unable to find: {source}"
                 ret.append(source)
 
             return ret
--
2.37.1 (Apple Git-137.1)

