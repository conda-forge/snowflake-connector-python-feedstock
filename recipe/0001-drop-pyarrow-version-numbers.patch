From 5d2ad648170fcd7dc6f068e10dc89b99ce7ad03d Mon Sep 17 00:00:00 2001
From: Andrew Achkar <hajapy@users.noreply.github.com>
Date: Sat, 30 Apr 2022 10:16:22 -0400
Subject: [PATCH] drop pyarrow version numbers

---
 pyproject.toml                                |  2 +-
 setup.cfg                                     |  2 +-
 setup.py                                      | 52 +++++++++++--------
 .../cpp/ArrowIterator/BinaryConverter.cpp     |  4 ++
 .../cpp/ArrowIterator/StringConverter.cpp     |  4 ++
 5 files changed, 41 insertions(+), 23 deletions(-)

diff --git a/pyproject.toml b/pyproject.toml
index 2bdafcb5..6d4266ef 100644
--- a/pyproject.toml
+++ b/pyproject.toml
@@ -6,7 +6,7 @@ requires = [
     "wheel",
     "cython",
     # Must be kept in sync with the `setup_requirements` in `setup.cfg`
-    "pyarrow>=10.0.1,<10.1.0",
+    "pyarrow",
 ]

 [tool.cibuildwheel]
diff --git a/setup.cfg b/setup.cfg
index 1b98b685..0fb7c12f 100644
--- a/setup.cfg
+++ b/setup.cfg
@@ -92,6 +92,6 @@ development =
     pytzdata
 pandas =
     pandas>=1.0.0,<1.6.0
-    pyarrow>=10.0.1,<10.1.0
+    pyarrow
 secure-local-storage =
     keyring!=16.1.0,<24.0.0
diff --git a/setup.py b/setup.py
index 09336043..4861a9cd 100644
--- a/setup.py
+++ b/setup.py
@@ -48,8 +48,9 @@ try:
     from Cython.Distutils import build_ext

     _ABLE_TO_COMPILE_EXTENSIONS = True
-except ImportError:
+except ImportError as e:
     warnings.warn("Cannot compile native C code, because of a missing build dependency")
+    raise
     _ABLE_TO_COMPILE_EXTENSIONS = False

 if _ABLE_TO_COMPILE_EXTENSIONS:
@@ -72,16 +73,16 @@ if _ABLE_TO_COMPILE_EXTENSIONS:
         # upgraded
         arrow_libs_to_copy = {
             "linux": [
-                "libarrow.so.1000",
-                "libarrow_dataset.so.1000",
-                "libarrow_python.so.1000",
-                "libparquet.so.1000",
+                "libarrow.so",
+                "libarrow_dataset.so",
+                "libarrow_python.so",
+                "libparquet.so",
             ],
             "darwin": [
-                "libarrow.1000.dylib",
-                "libarrow_dataset.1000.dylib",
-                "libarrow_python.1000.dylib",
-                "libparquet.1000.dylib",
+                "libarrow.dylib",
+                "libarrow_dataset.dylib",
+                "libarrow_python.dylib",
+                "libparquet.dylib",
             ],
             "win32": [
                 "arrow.dll",
@@ -93,16 +94,16 @@ if _ABLE_TO_COMPILE_EXTENSIONS:

         arrow_libs_to_link = {
             "linux": [
-                "libarrow.so.1000",
-                "libarrow_dataset.so.1000",
-                "libarrow_python.so.1000",
-                "libparquet.so.1000",
+                "libarrow.so",
+                "libarrow_dataset.so",
+                "libarrow_python.so",
+                "libparquet.so",
             ],
             "darwin": [
-                "libarrow.1000.dylib",
-                "libarrow_dataset.1000.dylib",
-                "libarrow_python.1000.dylib",
-                "libparquet.1000.dylib",
+                "libarrow.dylib",
+                "libarrow_dataset.dylib",
+                "libarrow_python.dylib",
+                "libparquet.dylib",
             ],
             "win32": [
                 "arrow.lib",
@@ -147,16 +148,20 @@ if _ABLE_TO_COMPILE_EXTENSIONS:
                 ext.include_dirs.append(ARROW_ITERATOR_SRC_DIR)
                 ext.include_dirs.append(LOGGING_SRC_DIR)

+                std_version = "c++17"
+                if pyarrow_version[0] < 10:
+                    std_version = "c++11"
+
                 if sys.platform == "win32":
                     if not any("/std" not in s for s in ext.extra_compile_args):
-                        ext.extra_compile_args.append("/std:c++17")
+                        ext.extra_compile_args.append(f"/std:{std_version}")
                     ext.include_dirs.append(pyarrow.get_include())
                     ext.include_dirs.append(numpy.get_include())
                 elif sys.platform == "linux" or sys.platform == "darwin":
                     ext.extra_compile_args.append("-isystem" + pyarrow.get_include())
                     ext.extra_compile_args.append("-isystem" + numpy.get_include())
                     if "std=" not in os.environ.get("CXXFLAGS", ""):
-                        ext.extra_compile_args.append("-std=c++17")
+                        ext.extra_compile_args.append(f"-std={std_version}")
                         ext.extra_compile_args.append("-D_GLIBCXX_USE_CXX11_ABI=0")
                     if sys.platform == "darwin":
                         ext.extra_compile_args.append("-mmacosx-version-min=10.13")
@@ -198,8 +203,13 @@ if _ABLE_TO_COMPILE_EXTENSIONS:
             ret = []

             for lib in link_lib:
-                source = f"{self._get_arrow_lib_dir()}/{lib}"
-                assert os.path.exists(source)
+                # conda-forge specific fix for arrow 10+
+                # see: https://github.com/conda-forge/arrow-cpp-feedstock/blob/main/recipe/meta.yaml#L279
+                if pyarrow_version[0] >= 10 and lib.startswith("libarrow_python"):
+                    source = f"{os.environ['SP_DIR']}/pyarrow/{lib}"
+                else:
+                    source = f"{self._get_arrow_lib_dir()}/{lib}"
+                assert os.path.exists(source), f"unable to find: {source}"
                 ret.append(source)

             return ret
diff --git a/src/snowflake/connector/cpp/ArrowIterator/BinaryConverter.cpp b/src/snowflake/connector/cpp/ArrowIterator/BinaryConverter.cpp
index eca3622b..c7257b84 100644
--- a/src/snowflake/connector/cpp/ArrowIterator/BinaryConverter.cpp
+++ b/src/snowflake/connector/cpp/ArrowIterator/BinaryConverter.cpp
@@ -18,7 +18,11 @@ PyObject* BinaryConverter::toPyObject(int64_t rowIndex) const
 {
   if (m_array->IsValid(rowIndex))
   {
+    #if ARROW_VERSION_MAJOR >= 10
     std::string_view sv = m_array->GetView(rowIndex);
+    #else
+    arrow::util::string_view sv = m_array->GetView(rowIndex);
+    #endif
     return PyByteArray_FromStringAndSize(sv.data(), sv.size());
   }
   else
diff --git a/src/snowflake/connector/cpp/ArrowIterator/StringConverter.cpp b/src/snowflake/connector/cpp/ArrowIterator/StringConverter.cpp
index de650683..62550135 100644
--- a/src/snowflake/connector/cpp/ArrowIterator/StringConverter.cpp
+++ b/src/snowflake/connector/cpp/ArrowIterator/StringConverter.cpp
@@ -18,7 +18,11 @@ PyObject* StringConverter::toPyObject(int64_t rowIndex) const
 {
   if (m_array->IsValid(rowIndex))
   {
+    #if ARROW_VERSION_MAJOR >= 10
     std::string_view sv = m_array->GetView(rowIndex);
+    #else
+    arrow::util::string_view sv = m_array->GetView(rowIndex);
+    #endif
     return PyUnicode_FromStringAndSize(sv.data(), sv.size());
   }
   else
--
2.37.2
